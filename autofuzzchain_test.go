package uplink

// Edit if desired. Code generated by "fzgen -chain storj.io/uplink".

import (
	"context"
	"testing"

	"github.com/thepudds/fzgen/fuzzer"
)

func Fuzz_ParseAccess_Chain(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var access string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&access)

		target, err := ParseAccess(access)
		if err != nil {
			return
		}

		steps := []fuzzer.Step{
			{
				Name: "Fuzz_Access_OverrideEncryptionKey",
				Func: func(bucket string, prefix string, encryptionKey *EncryptionKey) {
					target.OverrideEncryptionKey(bucket, prefix, encryptionKey)
				},
			},
			{
				Name: "Fuzz_Access_SatelliteAddress",
				Func: func() string {
					return target.SatelliteAddress()
				},
			},
			{
				Name: "Fuzz_Access_Serialize",
				Func: func() (string, error) {
					return target.Serialize()
				},
			},
			{
				Name: "Fuzz_Access_Share",
				Func: func(permission Permission, prefixes []SharePrefix) (*Access, error) {
					return target.Share(permission, prefixes...)
				},
			},
		}

		// Execute a specific chain of steps, with the count, sequence and arguments controlled by fz.Chain
		fz.Chain(steps)
	})
}

func Fuzz_OpenProject_Chain(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var access *Access
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &access)
		if access == nil {
			return
		}

		target, err := OpenProject(ctx, access)
		if err != nil {
			return
		}

		steps := []fuzzer.Step{
			{
				Name: "Fuzz_Project_AbortUpload",
				Func: func(ctx context.Context, bucket string, key string, uploadID string) {
					target.AbortUpload(ctx, bucket, key, uploadID)
				},
			},
			{
				Name: "Fuzz_Project_BeginUpload",
				Func: func(ctx context.Context, bucket string, key string, options *UploadOptions) (UploadInfo, error) {
					return target.BeginUpload(ctx, bucket, key, options)
				},
			},
			{
				Name: "Fuzz_Project_Close",
				Func: func() {
					target.Close()
				},
			},
			{
				Name: "Fuzz_Project_CommitUpload",
				Func: func(ctx context.Context, bucket string, key string, uploadID string, opts *CommitUploadOptions) (*Object, error) {
					return target.CommitUpload(ctx, bucket, key, uploadID, opts)
				},
			},
			{
				Name: "Fuzz_Project_CreateBucket",
				Func: func(ctx context.Context, bucket string) (*Bucket, error) {
					return target.CreateBucket(ctx, bucket)
				},
			},
			{
				Name: "Fuzz_Project_DeleteBucket",
				Func: func(ctx context.Context, bucket string) (*Bucket, error) {
					return target.DeleteBucket(ctx, bucket)
				},
			},
			{
				Name: "Fuzz_Project_DeleteBucketWithObjects",
				Func: func(ctx context.Context, bucket string) (*Bucket, error) {
					return target.DeleteBucketWithObjects(ctx, bucket)
				},
			},
			{
				Name: "Fuzz_Project_DeleteObject",
				Func: func(ctx context.Context, bucket string, key string) (*Object, error) {
					return target.DeleteObject(ctx, bucket, key)
				},
			},
			{
				Name: "Fuzz_Project_DownloadObject",
				Func: func(ctx context.Context, bucket string, key string, options *DownloadOptions) (*Download, error) {
					return target.DownloadObject(ctx, bucket, key, options)
				},
			},
			{
				Name: "Fuzz_Project_EnsureBucket",
				Func: func(ctx context.Context, bucket string) (*Bucket, error) {
					return target.EnsureBucket(ctx, bucket)
				},
			},
			{
				Name: "Fuzz_Project_ListBuckets",
				Func: func(ctx context.Context, options *ListBucketsOptions) *BucketIterator {
					return target.ListBuckets(ctx, options)
				},
			},
			{
				Name: "Fuzz_Project_ListObjects",
				Func: func(ctx context.Context, bucket string, options *ListObjectsOptions) *ObjectIterator {
					return target.ListObjects(ctx, bucket, options)
				},
			},
			{
				Name: "Fuzz_Project_ListUploadParts",
				Func: func(ctx context.Context, bucket string, key string, uploadID string, options *ListUploadPartsOptions) *PartIterator {
					return target.ListUploadParts(ctx, bucket, key, uploadID, options)
				},
			},
			{
				Name: "Fuzz_Project_ListUploads",
				Func: func(ctx context.Context, bucket string, options *ListUploadsOptions) *UploadIterator {
					return target.ListUploads(ctx, bucket, options)
				},
			},
			{
				Name: "Fuzz_Project_MoveObject",
				Func: func(ctx context.Context, oldbucket string, oldkey string, newbucket string, newkey string, options *MoveObjectOptions) {
					target.MoveObject(ctx, oldbucket, oldkey, newbucket, newkey, options)
				},
			},
			{
				Name: "Fuzz_Project_RevokeAccess",
				Func: func(ctx context.Context, access *Access) {
					target.RevokeAccess(ctx, access)
				},
			},
			{
				Name: "Fuzz_Project_StatBucket",
				Func: func(ctx context.Context, bucket string) (*Bucket, error) {
					return target.StatBucket(ctx, bucket)
				},
			},
			{
				Name: "Fuzz_Project_StatObject",
				Func: func(ctx context.Context, bucket string, key string) (*Object, error) {
					return target.StatObject(ctx, bucket, key)
				},
			},
			{
				Name: "Fuzz_Project_UpdateObjectMetadata",
				Func: func(ctx context.Context, bucket string, key string, newMetadata CustomMetadata, options *UploadObjectMetadataOptions) {
					target.UpdateObjectMetadata(ctx, bucket, key, newMetadata, options)
				},
			},
			{
				Name: "Fuzz_Project_UploadObject",
				Func: func(ctx context.Context, bucket string, key string, options *UploadOptions) (*Upload, error) {
					return target.UploadObject(ctx, bucket, key, options)
				},
			},
			{
				Name: "Fuzz_Project_UploadPart",
				Func: func(ctx context.Context, bucket string, key string, uploadID string, partNumber uint32) (*PartUpload, error) {
					return target.UploadPart(ctx, bucket, key, uploadID, partNumber)
				},
			},
		}

		// Execute a specific chain of steps, with the count, sequence and arguments controlled by fz.Chain
		fz.Chain(steps)
	})
}
